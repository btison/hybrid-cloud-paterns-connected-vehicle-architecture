apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  name: kafka2datagrid
  labels:
    app.kubernetes.io/part-of: {{ .Values.appName }}
spec:
  configuration:
    - type: secret
      value: kafka2datagrid
  profile: OpenShift
  sources:
    - content: {{`"package com.redhat.bobbycar.routes;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.cert.CertificateException;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport javax.net.ssl.X509TrustManager;\n\nimport org.apache.camel.Exchange;\nimport org.apache.camel.PropertyInject;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.infinispan.InfinispanConstants;\nimport org.apache.camel.component.infinispan.InfinispanOperation;\nimport org.apache.camel.component.netty.http.NettyHttpMessage;\nimport org.apache.camel.model.OnCompletionDefinition;\nimport org.apache.camel.model.rest.RestBindingMode;\nimport org.apache.camel.processor.aggregate.DefaultAggregateController;\nimport org.apache.camel.processor.aggregate.GroupedBodyAggregationStrategy;\nimport org.apache.camel.support.jsse.FilterParameters;\nimport org.apache.camel.support.jsse.SSLContextClientParameters;\nimport org.apache.camel.support.jsse.SSLContextParameters;\nimport org.apache.camel.support.jsse.TrustManagersParameters;\nimport org.infinispan.client.hotrod.RemoteCache;\nimport org.infinispan.client.hotrod.RemoteCacheManager;\nimport org.infinispan.client.hotrod.configuration.ClientIntelligence;\nimport org.infinispan.client.hotrod.configuration.Configuration;\nimport org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\nimport org.infinispan.client.hotrod.configuration.SaslQop;\nimport org.infinispan.commons.marshall.StringMarshaller;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class KafkaToDatagridRoute extends RouteBuilder {\n\t\n\tprivate static final String ZONE_CHANGE_HEADER = \"zoneChange\";\n\tprivate static final String ZONE_PREV_HEADER = \"previousZone\";\n\tprivate static final String ZONE_NXT_HEADER = \"nextZone\";\n\tprivate static final String CAR_ID_HEADER = \"carid\";\n\tprivate static final String VIN_HEADER = \"vin\";\n\tprivate static final String CACHE_TEMPLATE = \"org.infinispan.DIST_ASYNC\";\n\tprivate static final String PATH_TO_SERVICE_CA = \"/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt\";\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(KafkaToDatagridRoute.class);\n\t@PropertyInject(\"com.redhat.bobbycar.camelk.dg.host\")\n    private String datagridHost;\n\t@PropertyInject(value = \"com.redhat.bobbycar.camelk.dg.user\", defaultValue = \"developer\")\n    private String datagridUsername;\n\t@PropertyInject(\"com.redhat.bobbycar.camelk.dg.password\")\n    private String datagridPassword;\n\t@PropertyInject(value = \"com.redhat.bobbycar.camelk.dg.aggregationInterval\", defaultValue = \"60000\")\n\tprivate long aggregationInterval;\n\t@PropertyInject(value = \"com.redhat.bobbycar.camelk.dg.aggregationDistinct\", defaultValue = \"true\")\n    private boolean aggregationDistinct;\n\t@PropertyInject(value = \"com.redhat.bobbycar.camelk.dg.car.cacheName\")\n\tprivate String carsCacheName;\n\t@PropertyInject(value = \"com.redhat.bobbycar.camelk.dg.car.snapshot.cacheName\")\n\tprivate String carsnapshotCacheName;\n\t@PropertyInject(value = \"com.redhat.bobbycar.camelk.dg.zone.cacheName\")\n\tprivate String zonesCacheName;\n\t@PropertyInject(value = \"com.redhat.bobbycar.camelk.dg.ocp.api\")\n\tprivate String ocpAPIHost;\n\t@PropertyInject(value = \"com.redhat.bobbycar.camelk.dg.namespace\")\n\tprivate String namespace;\n\n\tprivate RemoteCacheManager cacheManager;\n\tprivate RemoteCache<String, String> zonesCache;\n\tprivate RemoteCache<String, String> carsCache;\n\tprivate RemoteCache<String, String> carsnapshotsCache; \n\tprivate ObjectMapper mapper = new ObjectMapper();\n\t\n\tpublic static class ZoneChangeEvent {\n\t\tprivate final String previousZoneId;\n\t\tprivate final String nextZoneId;\n\t\tprivate final String carId;\n\t\tprivate final String vin;\n\t\t\n\t\tpublic ZoneChangeEvent(String previousZoneId, String nextZoneId, String carId, String vin) {\n\t\t\tsuper();\n\t\t\tthis.previousZoneId = previousZoneId;\n\t\t\tthis.nextZoneId = nextZoneId;\n\t\t\tthis.carId = carId;\n\t\t\tthis.vin = vin;\n\t\t}\n\t\tpublic String getPreviousZoneId() {\n\t\t\treturn previousZoneId;\n\t\t}\n\t\tpublic String getNextZoneId() {\n\t\t\treturn nextZoneId;\n\t\t}\n\t\tpublic String getCarId() {\n\t\t\treturn carId;\n\t\t}\n\t\tpublic String getVin() {\n\t\t\treturn vin;\n\t\t}\n\t}\n\t\n\tpublic static class CarEvent implements Comparable<CarEvent>{\n\t\t@JsonProperty(\"lat\")\n\t\tprivate double latitude;\n\t\t@JsonProperty(\"long\")\n\t\tprivate double longitude;\n\t\t@JsonProperty(\"elev\")\n\t\tprivate double elevation;\n\t\t@JsonProperty(\"carid\")\n\t\tprivate String carId;\n\t\t@JsonProperty(\"vin\")\n\t\tprivate String vin;\n\t\tprivate long eventTime;\n\t\tprivate Zone zone;\n\t\t\n\t\tpublic double getLatitude() {\n\t\t\treturn latitude;\n\t\t}\n\t\tpublic void setLatitude(double latitude) {\n\t\t\tthis.latitude = latitude;\n\t\t}\n\t\tpublic double getLongitude() {\n\t\t\treturn longitude;\n\t\t}\n\t\tpublic void setLongitude(double longitude) {\n\t\t\tthis.longitude = longitude;\n\t\t}\n\t\tpublic double getElevation() {\n\t\t\treturn elevation;\n\t\t}\n\t\tpublic void setElevation(double elevation) {\n\t\t\tthis.elevation = elevation;\n\t\t}\n\t\tpublic String getCarId() {\n\t\t\treturn carId;\n\t\t}\n\t\tpublic void setCarId(String carId) {\n\t\t\tthis.carId = carId;\n\t\t}\n\t\tpublic String getVin() {\n\t\t\treturn vin;\n\t\t}\n\t\tpublic void setVin(String vin) {\n\t\t\tthis.vin = vin;\n\t\t}\n\t\tpublic long getEventTime() {\n\t\t\treturn eventTime;\n\t\t}\n\t\tpublic void setEventTime(long eventTime) {\n\t\t\tthis.eventTime = eventTime;\n\t\t}\n\t\tpublic Zone getZone() {\n\t\t\treturn zone;\n\t\t}\n\t\tpublic void setZone(Zone zone) {\n\t\t\tthis.zone = zone;\n\t\t}\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn Objects.hash(carId);\n\t\t}\n\t\t@Override\n\t\tpublic boolean equals(Object obj) {\n\t\t\tif (this == obj)\n\t\t\t\treturn true;\n\t\t\tif (obj == null)\n\t\t\t\treturn false;\n\t\t\tif (getClass() != obj.getClass())\n\t\t\t\treturn false;\n\t\t\tCarEvent other = (CarEvent) obj;\n\t\t\treturn Objects.equals(carId, other.carId) && Objects.equals(vin, other.vin);\n\t\t}\n\t\t@Override\n\t\tpublic int compareTo(CarEvent o) {\n\t\t\tint result = carId.compareTo(o.getCarId());\n\t\t\tif (result == 0) {\n\t\t\t\tresult = Long.compare(eventTime, o.getEventTime());\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn String.format(\"CarEvent [latitude=%s, longitude=%s, elevation=%s, carId=%s, eventTime=%s, zone=%s, vin=%s]\",\n\t\t\t\t\tlatitude, longitude, elevation, carId, eventTime, zone, vin);\n\t\t}\n\t}\n\t\n\tpublic static class Position {\n\t\tprivate double lat;\n\t\tprivate double lng;\n\t\tpublic double getLat() {\n\t\t\treturn lat;\n\t\t}\n\t\tpublic void setLat(double lat) {\n\t\t\tthis.lat = lat;\n\t\t}\n\t\tpublic double getLng() {\n\t\t\treturn lng;\n\t\t}\n\t\tpublic void setLng(double lng) {\n\t\t\tthis.lng = lng;\n\t\t}\n\t}\n\t\n\t@JsonIgnoreProperties(ignoreUnknown = true)\n\tpublic static class Metadata {\n\t\tprivate String name;\n\t\tprivate String resourceVersion;\n\t\tpublic String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\tpublic String getResourceVersion() {\n\t\t\treturn resourceVersion;\n\t\t}\n\t\tpublic void setResourceVersion(String resourceVersion) {\n\t\t\tthis.resourceVersion = resourceVersion;\n\t\t}\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn Objects.hash(name, resourceVersion);\n\t\t}\n\t\t@Override\n\t\tpublic boolean equals(Object obj) {\n\t\t\tif (this == obj)\n\t\t\t\treturn true;\n\t\t\tif (obj == null)\n\t\t\t\treturn false;\n\t\t\tif (getClass() != obj.getClass())\n\t\t\t\treturn false;\n\t\t\tMetadata other = (Metadata) obj;\n\t\t\treturn Objects.equals(name, other.name) && Objects.equals(resourceVersion, other.resourceVersion);\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn String.format(\"Metadata [name=%s, resourceVersion=%s]\", name, resourceVersion);\n\t\t}\n\t}\n\t\n\t@JsonIgnoreProperties(ignoreUnknown = true)\n\tpublic static class Zone implements Comparable<Zone>{\n\t\tprivate Metadata metadata;\n\t\tprivate ZoneSpec spec;\n\t\tpublic Metadata getMetadata() {\n\t\t\treturn metadata;\n\t\t}\n\t\tpublic void setMetadata(Metadata metaData) {\n\t\t\tthis.metadata = metaData;\n\t\t}\n\t\tpublic ZoneSpec getSpec() {\n\t\t\treturn spec;\n\t\t}\n\t\tpublic void setSpec(ZoneSpec spec) {\n\t\t\tthis.spec = spec;\n\t\t}\n\t\t\n\t\tpublic boolean isInside(double longitude, double latitude) {\n\t\t\treturn distanceTo(longitude, latitude) <= spec.getRadius();\n\t\t}\n\t\t\n\t\tprivate double distanceTo(double longitude, double latitude) {\n\t\t\tdouble lat1 = spec.getPosition().getLat();\n\t\t\tdouble lon1 = spec.getPosition().getLng();\n\t\t\tdouble lat2 = latitude;\n\t\t\tdouble lon2 = longitude;\t\t\t\n\t\t\t\n\t\t\tint R = 6371000; // metres\n\t\t\tdouble phi1 = lat1 * Math.PI/180; // φ, λ in radians\n\t\t\tdouble phi2 = lat2 * Math.PI/180;\n\t\t\tdouble deltaPhi = (lat2-lat1) * Math.PI/180;\n\t\t\tdouble deltaLambda = (lon2-lon1) * Math.PI/180;\n\n\t\t\tdouble a = Math.sin(deltaPhi/2) * Math.sin(deltaPhi/2) +\n\t\t\t          Math.cos(phi1) * Math.cos(phi2) *\n\t\t\t          Math.sin(deltaLambda/2) * Math.sin(deltaLambda/2);\n\t\t\tdouble c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n\t\t\treturn R * c; // in metres\n\t\t\t\n\t\t}\n\t\t@Override\n\t\tpublic int compareTo(Zone o) {\n\t\t\treturn Integer.compare(this.getSpec().getPriority(), o.getSpec().getPriority());\n\t\t}\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn Objects.hash(metadata);\n\t\t}\n\t\t@Override\n\t\tpublic boolean equals(Object obj) {\n\t\t\tif (this == obj)\n\t\t\t\treturn true;\n\t\t\tif (obj == null)\n\t\t\t\treturn false;\n\t\t\tif (getClass() != obj.getClass())\n\t\t\t\treturn false;\n\t\t\tZone other = (Zone) obj;\n\t\t\treturn Objects.equals(metadata, other.metadata);\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn String.format(\"Zone [metadata=%s, spec=%s]\", metadata, spec);\n\t\t}\n\t}\n\t\n\t@JsonIgnoreProperties(ignoreUnknown = true)\n\tpublic static class ZoneSpec {\n\t\tprivate String name;\n\t\tprivate Position position;\n\t\tprivate int priority;\n\t\tprivate int radius;\n\t\tprivate String type;\n\t\t\n\t\tpublic String getName() {\n\t\t\treturn name;\n\t\t}\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\tpublic Position getPosition() {\n\t\t\treturn position;\n\t\t}\n\t\tpublic void setPosition(Position position) {\n\t\t\tthis.position = position;\n\t\t}\n\t\tpublic int getPriority() {\n\t\t\treturn priority;\n\t\t}\n\t\tpublic void setPriority(int priority) {\n\t\t\tthis.priority = priority;\n\t\t}\n\t\tpublic int getRadius() {\n\t\t\treturn radius;\n\t\t}\n\t\tpublic void setRadius(int radius) {\n\t\t\tthis.radius = radius;\n\t\t}\n\t\tpublic String getType() {\n\t\t\treturn type;\n\t\t}\n\t\tpublic void setType(String type) {\n\t\t\tthis.type = type;\n\t\t}\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn Objects.hash(name, position, priority, radius, type);\n\t\t}\n\t\t@Override\n\t\tpublic boolean equals(Object obj) {\n\t\t\tif (this == obj)\n\t\t\t\treturn true;\n\t\t\tif (obj == null)\n\t\t\t\treturn false;\n\t\t\tif (getClass() != obj.getClass())\n\t\t\t\treturn false;\n\t\t\tZoneSpec other = (ZoneSpec) obj;\n\t\t\treturn Objects.equals(name, other.name) && Objects.equals(position, other.position)\n\t\t\t\t\t&& priority == other.priority && radius == other.radius && Objects.equals(type, other.type);\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn String.format(\"ZoneSpec [name=%s, position=%s, priority=%s, radius=%s, type=%s]\", name, position,\n\t\t\t\t\tpriority, radius, type);\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void configure() throws Exception {\n\t\tConfiguration cacheConfig = createCacheConfig();\n\t\tinitRemoteCache(cacheConfig);\n\t\tbindToRegistry(\"cacheContainerConfiguration\", cacheConfig);\n\n\t\trestConfiguration().host(\"0.0.0.0\").port(9080).component(\"netty-http\")\n\t\t\t.bindingMode(RestBindingMode.json)\n\t\t\t.dataFormatProperty(\"prettyPrint\", \"true\")\n\t\t\t.contextPath(\"/\");\n\n\t\t///mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n\n\t\tstoreZonesInCacheRoute();\n\t\tstoreCarEventsInCacheRoute();\n\t\tclearCacheEndpoint();\n\n\t\tif (aggregationInterval > 0) {\n\t\t\tstoreAggregatedSnaphotOfCarEventsInCacheRouteJson();\n\t\t}\n\t}\n\n\tprivate void clearCacheEndpoint() {\n\t\tfrom(\"rest:get:clearCache\").routeId(\"clearCacheEndpoint\")\n\t\t\t\t.setHeader(\"Access-Control-Allow-Origin\",constant(\"*\"))\n\t\t\t\t.process(ex -> {\n\t\t\t\t\tzonesCache.clear();\n\t\t\t\t\tcarsCache.clear();\n\t\t\t\t\tcarsnapshotsCache.clear();\n\t\t\t\t})\n\t\t\t\t.log(\"Cleared all caches\");\n\t}\n\n\tprivate void storeAggregatedSnaphotOfCarEventsInCacheRouteJson() {\n\t\tfrom(\"kafka:{{com.redhat.bobbycar.camelk.kafka.topic}}?clientId=kafkaToDatagridAggregatorCamelClient&brokers={{com.redhat.bobbycar.camelk.kafka.brokers}}\").routeId(\"storeAggregatedSnaphotOfCarEventsInCacheRouteJson\")\n\t\t\t//.unmarshal().json(JsonLibrary.Jackson, CarEvent.class)\n\t\t\t.process(ex -> \n\t\t\t\tex.getIn().setBody(mapper.readValue(ex.getIn().getBody(String.class), CarEvent.class))\n\t\t\t)\n\t\t\t.aggregate(simple(\"true\"), new GroupedBodyAggregationStrategy())\n\t\t\t.completionInterval(aggregationInterval).id(\"myAggregator\")\n\t\t\t.aggregateController(new DefaultAggregateController())\n\t\t\t.process(ex -> {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tList<CarEvent> aggregation = ex.getIn().getBody(List.class);\n\t\t\t\tStream<CarEvent> aggStream = aggregation.stream().sorted();\n\t\t\t\tif (aggregationDistinct) {\n\t\t\t\t\taggStream = aggStream.distinct();\n\t\t\t\t}\n\t\t\t\tex.getIn().setBody(\"[\" + aggStream\n\t\t\t\t\t\t.map(c -> {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn mapper.writeValueAsString(c);\n\t\t\t\t\t\t\t} catch (JsonProcessingException e) {\n\t\t\t\t\t\t\t\tLOGGER.error(\"Error writing json as string\", e);\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}).collect(Collectors.joining(\",\")) + \"]\");\n\t\t\t})\n\t\t\t.log(\"Aggregated for the given interval: ${body}\")\n\t\t\t.setHeader(InfinispanConstants.OPERATION).constant(InfinispanOperation.PUT)\n\t\t\t.setHeader(InfinispanConstants.KEY).expression(simple(\"aggregated\"))\n\t\t    .setHeader(InfinispanConstants.VALUE).expression(simple(\"${body}\"))\n\t\t\t.to(\"infinispan://{{com.redhat.bobbycar.camelk.dg.car.snapshot.cacheName}}?cacheContainerConfiguration=#cacheContainerConfiguration\");\n\t}\n\t\n\tprivate void storeZonesInCacheRoute() throws IOException {\n\t\t// restConfiguration().component(\"netty-http\").host(\"https://\"+ocpAPIHost).port(6443).bindingMode(RestBindingMode.json);\n\t\tbindToRegistry(\"sslConfiguration\", configureSslForApiAccess());\n\t\tString token = retrieveServiceAccountToken();\n\t\tfrom(\"scheduler://foo?delay={{com.redhat.bobbycar.camelk.dg.refresh.interval}}\").routeId(\"storeZonesInCache\")\n\t\t\t.process(ex -> {\n\t\t\t\tzonesCache.clear();\n\t\t\t})\n\t\t\t.setHeader(\"Authorization\").constant(\"Bearer \" + token)\n\t\t\t.setHeader(Exchange.HTTP_METHOD, constant(\"GET\"))\n\t\t\t.setHeader(\"Connection\", constant(\"Keep-Alive\"))\n\t\t\t.setHeader(Exchange.CONTENT_TYPE, constant(\"application/json\"))\n\t\t\t.to(\"netty-http:https://\" + ocpAPIHost + \":6443/apis/bobbycar.redhat.com/v1alpha1/namespaces/\" + namespace + \"/bobbycarzones?sslContextParameters=#sslConfiguration&keepAlive=true\")\n\t\t\t//.log(\"Response was ${body}\")\n\t\t\t\t.process(exchange -> {\n\t\t\t\t\tNettyHttpMessage msg = exchange.getIn(NettyHttpMessage.class);\n\t\t\t\t\tString payload = msg.getBody(String.class);\n\t\t\t\t\tString zonesData = payload.substring(payload.indexOf(\"\\\"items\\\":[\")+8, payload.indexOf(\",\\\"kind\\\":\\\"BobbycarZoneList\\\"\"));\n\t\t\t\t\texchange.getIn().setBody(zonesData);\n\t\t\t\t})\n\t\t\t.split().jsonpathWriteAsString(\"$\")\n\t\t\t//.log(\"Item is ${body} of type ${body.class}\")\n\t\t\t.setHeader(InfinispanConstants.KEY).expression(jsonpath(\"$.metadata.name\", String.class))\n\t\t\t.setHeader(InfinispanConstants.VALUE).expression(simple(\"${body}\"))\n\t\t\t.log(\"Saving data to cache with value: ${headers[CamelInfinispanValue]}\")\n\t\t\t.to(\"infinispan://{{com.redhat.bobbycar.camelk.dg.zone.cacheName}}?cacheContainerConfiguration=#cacheContainerConfiguration\");\n\t}\n\n\tprivate String retrieveServiceAccountToken() throws IOException {\n\t\tPath filePath = Paths.get(\"/var/run/secrets/kubernetes.io/serviceaccount/token\");\n\t\treturn new String(Files.readAllBytes(filePath));\n\t}\n\n\tprivate void storeCarEventsInCacheRoute() {\n\t\t// clear the cars cache before starting the route\n\t\tcarsCache.clear();\n\n\t\tfrom(\"kafka:{{com.redhat.bobbycar.camelk.kafka.topic}}?clientId=kafkaToDatagridCamelClient&brokers={{com.redhat.bobbycar.camelk.kafka.brokers}}\").routeId(\"storeCarEventsInCache\")\n\t\t\t.log(\"Received ${body} from Kafka\")\n\t\t\t.setHeader(InfinispanConstants.OPERATION).constant(InfinispanOperation.PUT)\n\t\t\t.setHeader(InfinispanConstants.KEY).expression(jsonpath(\"$.carid\"))\n\t\t\t//.unmarshal().json(JsonLibrary.Jackson, CarEvent.class)\n\t\t\t.process(ex -> \n\t\t\t\tex.getIn().setBody(mapper.readValue(ex.getIn().getBody(String.class), CarEvent.class))\n\t\t\t)\n\t\t\t.log(\"Received ${body} from  ${body.class}\")\n\t\t    .process(this::processZoneData)\n\t\t    //.marshal().json(JsonLibrary.Jackson, String.class)\n\t\t    .process(ex -> \n\t\t\t\tex.getIn().setBody(mapper.writeValueAsString(ex.getIn().getBody(CarEvent.class)))\n\t\t\t)\n\t\t    .setHeader(InfinispanConstants.VALUE).expression(simple(\"${body}\"))\n\t\t    .setHeader(InfinispanConstants.RESULT_HEADER).expression(simple(\"dummyAvoidOverwritingBody\"))\n\t\t    .log(\"Saving data to cache with key: ${headers[CamelInfinispanKey]} and value: ${body} of type  ${body.class}\")\n\t\t\t.to(\"infinispan://{{com.redhat.bobbycar.camelk.dg.car.cacheName}}?cacheContainerConfiguration=#cacheContainerConfiguration\")\n\t\t\t.choice()\n\t\t\t\t.when(header(ZONE_CHANGE_HEADER).isEqualTo(true))\n\t\t\t\t.process(this::transformToZoneChangeEvent)\n\t\t\t\t//.marshal().json(JsonLibrary.Jackson, String.class)\n\t\t\t\t.process(ex -> \n\t\t\t\t\tex.getIn().setBody(mapper.writeValueAsString(ex.getIn().getBody(ZoneChangeEvent.class)))\n\t\t\t\t)\n\t\t\t\t.log(\"Publishing ${body} to mqtt\")\n\t\t\t\t.to(\"paho:{{com.redhat.bobbycar.camelk.mqtt.topic}}?brokerUrl={{com.redhat.bobbycar.camelk.mqtt.brokerUrl}}\")\n\t\t\t;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tprivate void transformToZoneChangeEvent(Exchange ex) {\t\n\t\tOptional<Zone> previousZone = (Optional<Zone>) ex.getIn().getHeader(ZONE_PREV_HEADER);\n\t\tOptional<Zone> nextZone = (Optional<Zone>) ex.getIn().getHeader(ZONE_NXT_HEADER);\n\t\tString carId = (String) ex.getIn().getHeader(CAR_ID_HEADER);\n\t\tString vin = (String) ex.getIn().getHeader(VIN_HEADER);\n\t\tex.getIn().setBody(new ZoneChangeEvent(previousZone.map(z -> z.getMetadata().getName()).orElse(null), \n\t\t\t\tnextZone.map(z -> z.getMetadata().getName()).orElse(null), carId, vin));\n\t}\n\n\tprivate void processZoneData(Exchange ex) {\n\t\tCarEvent car = ex.getIn().getBody(CarEvent.class);\n\t\tdouble lat = car.getLatitude();\n\t\tdouble lng = car.getLongitude();\n\t\tex.getIn().setHeader(CAR_ID_HEADER, car.getCarId());\n\t\tex.getIn().setHeader(VIN_HEADER, car.getVin());\n\t\tOptional<Zone> matchingZone = zonesCache.values().stream()\n\t\t\t.map(zs -> {\n\t\t\t\ttry {\n\t\t\t\t\treturn mapper.readValue(zs, Zone.class);\n\t\t\t\t} catch (JsonProcessingException e) {\n\t\t\t\t\tLOGGER.error(\"Error marshalling zone\", e);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.filter(z -> z.isInside(lng, lat))\n\t\t\t.sorted()\n\t\t\t.findFirst();\n\t\tOptional<Zone> previousZone = getPreviousZoneFromCache(car.carId);\n\t\tif (!previousZone.equals(matchingZone)) {\n\t\t\tLOGGER.error(\"Zone changed from {} to {}\", previousZone, matchingZone);\n\t\t\tex.getIn().setHeader(ZONE_CHANGE_HEADER, true);\n\t\t\tex.getIn().setHeader(ZONE_PREV_HEADER, previousZone);\n\t\t\tex.getIn().setHeader(ZONE_NXT_HEADER, matchingZone);\n\t\t}\n\t\tcar.setZone(matchingZone.orElse(null));\n\t}\n\t\n\tprivate Optional<Zone> getPreviousZoneFromCache(String carId) {\n\t\ttry {\n\t\t\tif (carsCache.containsKey(carId)) {\n\t\t\t\tCarEvent carEventFromCache = mapper.readValue(carsCache.get(carId), CarEvent.class);\n\t\t\t\treturn Optional.ofNullable(carEventFromCache.getZone());\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Optional.empty();\n\t\t\t}\n\t\t} catch (JsonProcessingException e) {\n\t\t\tLOGGER.error(\"Error marshalling carevent\", e);\n\t\t\treturn Optional.empty();\n\t\t}\n\t}\n\n\tprivate void initRemoteCache(Configuration cacheConfig) {\n\t\tcacheManager = new RemoteCacheManager(cacheConfig);\n\t\tcacheManager.start();\n\t\tzonesCache = cacheManager.administration().getOrCreateCache(zonesCacheName, CACHE_TEMPLATE);\n\t\tcarsCache = cacheManager.administration().getOrCreateCache(carsCacheName, CACHE_TEMPLATE);\n\t\tcarsnapshotsCache = cacheManager.administration().getOrCreateCache(carsnapshotCacheName, CACHE_TEMPLATE);\n\t}\n\t\n\tprivate Configuration createCacheConfig() {\n\t\tConfigurationBuilder hotRodBuilder = new ConfigurationBuilder();\n\t\treturn hotRodBuilder.addServer()\n\t        .host(datagridHost).port(11222)\n\t        \t.marshaller(new StringMarshaller(Charset.defaultCharset()))\n\t        .clientIntelligence(ClientIntelligence.HASH_DISTRIBUTION_AWARE)\n\t        \t.security()\n\t        \t\t//.authentication().enable()\n\t        \t\t//.username(datagridUsername)\n\t        \t\t//.password(datagridPassword)\n\t        \t\t//.serverName(\"infinispan\")\n\t        \t\t//.saslQop(SaslQop.AUTH)\n\t        \t\t//.saslMechanism(\"DIGEST-MD5\")\n\t\t\t\t.ssl()\n\t\t\t\t\t.sniHostName(datagridHost)\n\t\t\t\t\t.trustStoreFileName(PATH_TO_SERVICE_CA)\n\t\t\t\t\t.trustStoreType(\"pem\")\n        .build();\n\t}\n\t\n\tprivate SSLContextParameters configureSslForApiAccess() {\n\t\tSSLContextParameters params = new SSLContextParameters();\n\t\tparams.setCamelContext(getContext());\n\t\tSSLContextClientParameters clientParameters = new SSLContextClientParameters();\n\t\tclientParameters.setSniHostName(ocpAPIHost);\n\t\tFilterParameters cipherSuitesFilter = new FilterParameters();\n\t\tcipherSuitesFilter.getInclude().add(\".*\");\n\t\tclientParameters.setCipherSuitesFilter(cipherSuitesFilter);\n\t\tparams.setClientParameters(clientParameters);\n\t\tTrustManagersParameters trustManagers = new TrustManagersParameters();\n\t\ttrustManagers.setTrustManager(new X509TrustManager() {\n\t\t\t\n\t\t\tprivate X509Certificate apiServerCert;\n\t\t\t{\n\t\t\t\tCertificateFactory fact;\n\t\t\t\ttry {\n\t\t\t\t\tfact = CertificateFactory.getInstance(\"X.509\");\n\t\t\t\t\tFileInputStream is = new FileInputStream (new File(PATH_TO_SERVICE_CA));\n\t\t\t\t\tapiServerCert = (X509Certificate) fact.generateCertificate(is);\n\t\t\t\t} catch (CertificateException | FileNotFoundException e) {\n\t\t\t\t\tLOGGER.error(\"Error loading certificate\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t// Allow all certs\n\t\t\t\treturn new X509Certificate[0];\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n\t\t\t\t// Allow all certs\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n\t\t\t\t// Allow all certs\n\t\t\t}\n\t\t});\n\t\tparams.setTrustManagers(trustManagers);\n\t\treturn params;\n\t}\n\t\n\t@Override\n\tpublic OnCompletionDefinition onCompletion() {\n\t\tcacheManager.close();\n\t\treturn super.onCompletion();\n\t}\n}\n"`}}
      name: KafkaToDatagridRoute.java
  traits:
    service:
      configuration:
        enabled: false